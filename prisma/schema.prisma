// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  clerkUserId         String    @unique  // Clerk's user ID
  email       String    @unique
  name        String?
  imageUrl    String?
  role        UserRole  @default(UNASSIGNED)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  credits    Int  @default(2)

  specialty  String?
  experience  Int?
  credentialUrl  String?
  description   String?  @db.Text
  verificattionStatus  VerificationStatus?  @dedault(PENDING)


  patientAppointments Appointment[]       @relation("PatientAppointments")
  doctorAppointments  Appointment[]       @relation("DoctorAppointments")
  availabilities      Availability[]
  transactions        CreditTransaction[]

}

enum UserRole {
  UNASSIGNED
  PATIENT
  DOCTOR
  ADMIN
}

enum VerificationStatus{
  PENDING
  VERIFIED
  REJECTED
}

model Availability {
  id         String     @id @default(uuid())
  doctorId   String
  doctor     User       @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  startTime  DateTime
  endTime    DateTime
  status     SlotStatus @default(AVAILABLE)

  @@index([doctorId, startTime])
}

enum SlotStatus{
  AVAILABLE
  BOOKED
  BLOCKED
}

model Appointment {
  id                  String              @id @default(uuid())

  // Relations
  patientId           String
  patient             User                @relation("PatientAppointments", fields: [patientId], references: [id])

  doctorId            String
  doctor              User                @relation("DoctorAppointments", fields: [doctorId], references: [id])

  // Appointment details
  startTime           DateTime            // Start time of appointment
  endTime             DateTime            // End time of appointment
  status              AppointmentStatus   @default(SCHEDULED)
  notes               String?             @db.Text
  patientDescription  String?             @db.Text

  // Optional: Video session fields (e.g. for Vonage)
  videoSessionId      String?
  videoSessionToken   String?

  // Timestamps
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt


  @@index([status,startTime])
  @@index([doctorId,startTime])
}

enum AppointmentStatus{
  SCHEDULED
  COMPLATED
  CANCELLED
}

